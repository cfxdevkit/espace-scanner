// This file is auto-generated from the OpenAPI specification
// Do not edit this file manually

// Types for /nft/balances
export interface BalancesParams {
  /** Owner address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  owner: string;

  /** The number of skipped records, usually it's pageSize * (pageNumber - 1).
   * @default 0 */
  skip?: number;

  /** The number of records displayed on the page. Maximum 100.
   * @default 10 */
  limit?: number;
}

export type Balances = {
  total?: number;

  list?: Array<{
    /** Contract address of the token. */
    contract?: string;

    /** The token balance of an account, the string is not divided by the token decimal. */
    balance?: string;

    /** Name of the token. */
    name?: string;

    /** Symbol of the token. */
    symbol?: string;

    /** The type of the token, and it may be ERC721/ERC1155. */
    type?: string;

    /** The web site of the token. */
    webSite?: string;

    /** Icon url. */
    iconUrl?: string;
  }>;
};

// Types for /nft/tokens
export interface TokensParams {
  /** Contract address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  contract: string;

  /** Owner address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  owner?: string;

  /** Sort in ASC or DESC order by timestamp
   * @default DESC */
  sort?: string;

  /** The field used for sorting. The value is latest_update_time or mint_time
   * @default latest_update_time */
  sortField?: string;

  /** A cursor to retrieve the next page
   * @default 0 */
  cursor?: string;

  /** The number of skipped records, usually it's pageSize * (pageNumber - 1).
   * @default 0 */
  skip?: number;

  /** The number of records displayed on the page. Maximum 100.
   * @default 10 */
  limit?: number;

  /** If show brief which contains name，image and description, the value is true/false.
   * @default false */
  withBrief?: string;

  /** If show metadata, the value is true/false.
   * @default false */
  withMetadata?: string;

  /** If suppress error when withBrief and/or withMetadata is set to true to parse metadata, the value is true/false.
   * @default false */
  suppressMetadataError?: string;
}

export type Tokens = {
  total?: number;

  /** A cursor to retrieve the next page */
  next?: string;

  list?: Array<{
    /** Contract address of the token. */
    contract?: string;

    /** The token id. */
    tokenId?: string;

    /** The name of NFT */
    name?: string;

    /** The image uri of NFT */
    image?: string;

    /** The description of NFT */
    description?: string;

    rawData?: {
      /** The function of contract which is called */
      funcCall?: string;

      /** uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated. */
      tokenUri?: string;

      /** relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually */
      // metadata?: any;
    };

    /** A string describing a particular reason that we were unable to fetch complete metadata for the NFT. */
    error?: string;
  }>;
};

// Types for /nft/preview
export interface PreviewParams {
  /** Contract address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  contract: string;

  /** Token id. It's uint256 in solidity. Using string here. */
  tokenId: string;

  /** If show metadata, the value is true/false.
   * @default false */
  withMetadata?: string;
}

export type Preview = {
  /** Contract address of the token. */
  contract?: string;

  /** The token id. */
  tokenId?: string;

  /** The name of NFT */
  name?: string;

  /** The image uri of NFT */
  image?: string;

  /** The description of NFT */
  description?: string;

  /** Token type, ERC20、ERC721 or ERC1155 */
  type?: string;

  /** The owner address. */
  owner?: string;

  /** The creator address. */
  creator?: string;

  /** The timestamp of the NFT. */
  mintTimestamp?: number | string;

  rawData?: {
    /** The function of contract which is called */
    funcCall?: string;

    /** uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated. */
    tokenUri?: string;

    /** relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually */
    // metadata?: any;
  };

  /** A string describing a particular reason that we were unable to fetch complete metadata for the NFT. */
  error?: string;
};

// Types for /nft/fts
export interface FtsParams {
  /** The name attribute contained in nft metadata */
  name: string;

  /** Contract address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  contract?: string;
}

export type Fts = {
  total?: number;

  list?: Array<{
    /** Contract address of the token. */
    contract?: string;

    /** The token id. */
    tokenId?: string;

    /** The name of NFT */
    name?: string;
  }>;
};

// Types for /nft/owners
export interface OwnersParams {
  /** Contract address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  contract: string;

  /** Token id. It's uint256 in solidity. Using string here. */
  tokenId?: string;

  /** A cursor to retrieve the next page
   * @default 0 */
  cursor?: string;

  /** The number of records displayed on the page. Maximum 100.
   * @default 10 */
  limit?: number;
}

export type Owners = {
  total?: number;

  /** A cursor to retrieve the next page */
  next?: string;

  list?: Array<{
    /** Contract address of the token. */
    address?: string;

    /** The token id. */
    amount?: string;
  }>;
};

// Types for /nft/transfers
export interface TransfersParams {
  /** Contract address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  contract: string;

  /** Token id. It's uint256 in solidity. Using string here. */
  tokenId?: string;

  /** A cursor to retrieve the next page
   * @default 0 */
  cursor?: string;

  /** The number of records displayed on the page. Maximum 100.
   * @default 10 */
  limit?: number;

  /** Account address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  from?: string;

  /** Account address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
  to?: string;

  /** */
  startBlock?: number;

  /** */
  endBlock?: number;

  /** Timestamp in seconds. */
  minTimestamp?: number;

  /** Timestamp in seconds. */
  maxTimestamp?: number;

  /** Sort in ASC or DESC order by timestamp
   * @default DESC */
  sort?: string;
}

export type Transfers = {
  total?: number;

  /** A cursor to retrieve the next page */
  next?: string;

  list?: Array<{
    /** Block Number */
    blockNumber?: number;

    /** Transaction Hash */
    transactionHash?: string;

    /** Account address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
    from?: string;

    /** Account address, it's like 0x672158893ce87d812befd2209bc1b7818fe48b2a */
    to?: string;

    /** The CFX value or token amount in the transfer, the string is not divided by the CFX/token decimal */
    amount?: string;

    /** The token id in ERC721/ERC1155 transfer, otherwise it is 0 */
    tokenId?: string;

    /** Timestamp in seconds */
    timestamp?: number | string;
  }>;

  addressInfo?: {
    [key: string]: {
      contract?: {
        /** Name of the contract. */
        name?: string;

        verify?: {
          /** Verify result of the contract, 1-verified, 0-not verified. */
          result?: number;
        };
      };

      token?: {
        /** Name of the token. */
        name?: string;

        /** Symbol of the token. */
        symbol?: string;

        /** Decimal of the token, omit if empty. */
        decimals?: number;

        /** Website  of the token, optional */
        website?: string;

        /** Icon url, optional */
        iconUrl?: string;

        /** Token type, ERC20、ERC721 or ERC1155 */
        tokenType?: string;
      };
    };
  };
};
